name: Java CI/CD with Gradle

on:
  push:
    branches:
      - main
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Verify Docker
        run: docker ps

      - name: execute remote ssh & deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /home/twj/interior
            git pull
            sleep 3
            docker compose up -d --build 

  # test:
  #     needs: build
  #     runs-on: ubuntu-latest
  #     steps:
  #     - name: Verify the server's active status.
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.SERVER_HOST }}
  #         username: ${{ secrets.SERVER_USERNAME }}
  #         key: ${{ secrets.SERVER_SSH_KEY }}
  #         port: ${{ secrets.SERVER_PORT }}
  #         script: |
  #           whoami

  #           # 헬스체크 10번
  #           for i in {1..100}
  #           do
  #           response=$(curl -s http://localhost:707/actuator/health)

  #           # 응답이 "status":"UP"을 포함하는지 확인
  #           if [[ "$response" == *"\"status\":\"UP\""* ]]; then
  #             echo "true"
  #             break # 성공 시 루프를 종료합니다.
  #           else
  #             echo "Attempt $i: Server is not up"
  #           fi

  #           # 1초 대기
  #           sleep 1
  #           done

  #           # 10번 시도 후에도 성공하지 못한 경우
  #           if [[ "$i" == 100 ]]; then
  #             echo "서버가 정상적으로 시동되지 않았음."
  #             exit 1
  #           fi
